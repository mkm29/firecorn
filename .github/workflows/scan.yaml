on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

name: Security Scan
jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  snyk:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker registry
      run: docker login registry.redhat.io --username ${{ secrets.REDHAT_USERNAME }} --password ${{ secrets.REDHAT_PASSWORD }}
    - name: Build a Docker image
      run: docker build -t smigula/firecorn:latest .
    - name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        SNYK_REGISTRY_USERNAME: ${{ secrets.REDHAT_USERNAME }}
        SNYK_REGISTRY_PASSWORD: ${{ secrets.REDHAT_PASSWORD }}
      with:
        image: smigula/firecorn:latest
        args: --file=Dockerfile
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif
  
  anchore:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker registry
        run: docker login registry.redhat.io --username ${{ secrets.REDHAT_USERNAME }} --password ${{ secrets.REDHAT_PASSWORD }}
      - name: Build the container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - uses: anchore/scan-action@v2
        with:
          image: "localbuild/testimage:latest"
          fail-build: true
      - name: grype scan JSON results
        run: for j in `ls ./anchore-reports/*.json`; do echo "---- ${j} ----"; cat ${j}; echo; done